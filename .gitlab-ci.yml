image: node:16.14 #define image for docker

# The following blocks are YAML anchors. Those allow some deduplication of the YAML CI file. They will be inserted whenever
# they are referenced further. See test:server and package:http-server
.dbmate-setup: &dbmate-setup
  - "[ -e dbmate-$DBMATE_VERSION ] || curl -s -LO https://github.com/amacneil/dbmate/releases/download/$DBMATE_VERSION/dbmate-linux-amd64"
  - mv dbmate-linux-amd64 dbmate-$DBMATE_VERSION > /dev/null 2>&1 || true
  - chmod +x dbmate-$DBMATE_VERSION
  - DATABASE_URL="$DATABASE_URL" ./dbmate-$DBMATE_VERSION up

.docker-image-build: &docker-image-build
  # Debug information
  - "echo Current branch: [$CI_COMMIT_BRANCH]. Default branch [$CI_DEFAULT_BRANCH]"

  # Login and pull the docker image tagged with latest to act as a cache
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull $REGISTRY_BASE_IMAGE:latest || true

  # Build the container with the designated tag.
  - echo Building container $REGISTRY_BASE_IMAGE:$DOCKER_IMAGE_TAG
  - docker build --cache-from=$REGISTRY_BASE_IMAGE:latest -t $REGISTRY_BASE_IMAGE:$DOCKER_IMAGE_TAG .
  # Uncomment this line whenever we want to push every container build of other branches to the registry
  # The condition prevents the tag latest to be applied to commits on other branches than the default one, i.e. trunk
  #- "[[ $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]] && { echo 'Tagging container to latest'; docker tag $REGISTRY_BASE_IMAGE:$DOCKER_IMAGE_TAG $REGISTRY_BASE_IMAGE:latest; }"
  - docker tag $REGISTRY_BASE_IMAGE:$DOCKER_IMAGE_TAG $REGISTRY_BASE_IMAGE:latest

  - docker push --all-tags $REGISTRY_BASE_IMAGE

variables:
  # Docker related variables. One is for the certificates, the other is the docker
  # image tag that will be published on the registry
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

  # Deployment variables
  SSH_CONNECTION_STRING: mathiasb@vlhprj645docker.hevs.ch
  SSH_TARGET_DIRECTORY: /home/mathiasb/646-meet-my-needs

  # Database related variables
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DBMATE_VERSION: v1.14.0

stages:
  - test
  - build
  - package
  - deploy

cache:
  - key: nodejs-deps
    paths:
      - client/node_modules/
      - api/node_modules/
      - .npm

  - key: dbmate-$DBMATE_VERSION
    paths:
      - dbmate-$DBMATE_VERSION

test:client:
  stage: test
  services:
    - name: postgres:13.6-bullseye
      alias: database
  variables:
    DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/meetmyneeds?sslmode=disable
  script:
    - *dbmate-setup
    - cd client
    - npm --cache ../.npm --prefer-offline install
    - npm test

test:server:
  stage: test
  services:
    - name: postgres:13.6-bullseye
      alias: database
  variables:
    DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/meetmyneeds?sslmode=disable
  script:
    - *dbmate-setup
    - cd api
    - npm --cache ../.npm --prefer-offline install
    - npm test

build:client:
  stage: build
  script:
    - cd client
    - npm install
    - rm build -Rf
    - CI=false npm run build #if CI=true(default) warning are treated as errors
    - echo "Build successful"
  artifacts:
    paths:
      - client/build/

package:http-server:
  image: docker:20.10.12
  dependencies:
    - build:client
  services:
    - name: docker:20.10.12-dind
      alias: docker
  stage: package
  variables:
    REGISTRY_BASE_IMAGE: $CI_REGISTRY_IMAGE/react
  script:
    - cd client
    - *docker-image-build
  only:
    - trunk

package:api-server:
  image: docker:20.10.12
  services:
    - name: docker:20.10.12-dind
      alias: docker
  stage: package
  variables:
    REGISTRY_BASE_IMAGE: $CI_REGISTRY_IMAGE/api
  script:
    - cd api
    - *docker-image-build
  only:
    - trunk

deploy-application:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client
    - chmod 600 $SSH_PRIVATE_KEY
  script:
    - echo Deploying $CI_COMMIT_SHA to $SSH_CONNECTION_STRING at [$SSH_TARGET_DIRECTORY]
    # Splitting over multiple lines, certainly makes things more readable
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" "cd $SSH_TARGET_DIRECTORY && git fetch && git checkout ${CI_COMMIT_BRANCH:-trunk} && git pull && git checkout $CI_COMMIT_SHA"
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" "cd $SSH_TARGET_DIRECTORY && docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull"
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" "cd $SSH_TARGET_DIRECTORY && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" "cd $SSH_TARGET_DIRECTORY && docker-compose -f docker-compose.yml run --rm dbmate up"
  only:
    - trunk
