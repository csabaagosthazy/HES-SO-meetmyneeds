image: node:16.14 #define image for docker

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - test
  - build
  - deploy

cache:
  paths:
    - node_modules/

test project:
  stage: test
  script:
    - npm install
    - npm test

build project:
  stage: build
  script:
    - npm install
    - CI=false npm run build #if CI=true(default) warning are treated as errors
    - echo "Build successful"
  artifacts:
    paths:
      - build/

# TODO: Set the only rule back to trunk. This has been disabled for testing within the features/ci-auto-deployment
build docker image:
  dependencies:
    - build project
  image: docker:20.10.12
  services:
    - name: docker:20.10.12-dind
      alias: docker

  variables:
    DOCKER_IMAGE_TAG: $CI_COMMIT_REF_SLUG

  stage: build
  script:
    - echo $CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX
    - echo $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Project needs to be in a group to be able to access the dependency proxy, it seems
    #- docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    # Use some caching with the local registry
    - docker pull $CI_REGISTRY_IMAGE/react:latest || true
    - docker build --cache-from=$CI_REGISTRY_IMAGE/react:latest -t $CI_REGISTRY_IMAGE/react:latest -t $CI_REGISTRY_IMAGE/react:$DOCKER_IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/react:$DOCKER_IMAGE_TAG

#deploy docker image:
#  image: debian:bullseye
#  script:
#    - echo Deploying docker image to the remote server
