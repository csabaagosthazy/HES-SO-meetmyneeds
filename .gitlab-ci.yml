image: node:16.14 #define image for docker

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  SSH_CONNECTION_STRING: mathiasb@vlhprj645docker.hevs.ch
  SSH_TARGET_DIRECTORY: /home/mathiasb/646-meet-my-needs

stages:
  - test
  - build
  - deploy

cache:
  paths:
    - node_modules/

test:project:
  stage: test
  script:
    - npm install
    - npm test

build:project:
  stage: build
  script:
    - npm install
    - CI=false npm run build #if CI=true(default) warning are treated as errors
    - echo "Build successful"
  artifacts:
    paths:
      - build/

# TODO: Set the only rule back to trunk. This has been disabled for testing within the features/ci-auto-deployment
build:docker-image:
  image: docker:20.10.12
  services:
    - name: docker:20.10.12-dind
      alias: docker

  variables:
    DOCKER_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

  stage: build
  script:
    - ls -lA
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Project needs to be in a group to be able to access the dependency proxy, it seems
    #- docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    # Use some caching with the local registry
    - docker pull $CI_REGISTRY_IMAGE/react:latest || true
    - docker build --cache-from=$CI_REGISTRY_IMAGE/react:latest -t $CI_REGISTRY_IMAGE/react:latest -t $CI_REGISTRY_IMAGE/react:$DOCKER_IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/react:$DOCKER_IMAGE_TAG
#  only:
#    - trunk

deploy docker image:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client
    - chmod 600 $SSH_PRIVATE_KEY
  script:
    - echo Deploying $CI_COMMIT_SHA to $SSH_CONNECTION_STRING at [$SSH_TARGET_DIRECTORY]
    # Splitting over multiple lines, certainly makes things more readable
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -v "$SSH_CONNECTION_STRING" 'cd $SSH_TARGET_DIRECTORY && git pull && git checkout $CI_COMMIT_SHA'
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" 'cd $SSH_TARGET_DIRECTORY && docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull'
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY "$SSH_CONNECTION_STRING" 'cd $SSH_TARGET_DIRECTORY && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d'
#  only:
#    - trunk